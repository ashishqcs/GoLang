// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: movies.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (
  id, title, released, genre, actors, year, price, quantity
) VALUES(
  $1, $2, $3, $4, $5, $6, $7, $8
) 
ON CONFLICT (id) 
DO 
   UPDATE SET title = $2, released = $3, genre = $4, actors = $5, year = $6, price = $7, quantity = $8
RETURNING id, title, released, genre, actors, year, price, quantity
`

type CreateMovieParams struct {
	ID       string
	Title    string
	Released time.Time
	Genre    string
	Actors   string
	Year     int32
	Price    int64
	Quantity int32
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie,
		arg.ID,
		arg.Title,
		arg.Released,
		arg.Genre,
		arg.Actors,
		arg.Year,
		arg.Price,
		arg.Quantity,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Released,
		&i.Genre,
		&i.Actors,
		&i.Year,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}

const getMovie = `-- name: GetMovie :one
SELECT id, title, released, genre, actors, year, price, quantity FROM movies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMovie(ctx context.Context, id string) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Released,
		&i.Genre,
		&i.Actors,
		&i.Year,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT id, title, released, genre, actors, year, price, quantity FROM movies
WHERE (CASE WHEN $3::bool THEN genre LIKE '%' || $4 || '%' ELSE TRUE END)
  AND (CASE WHEN $5::bool THEN actors LIKE '%' || $6 || '%' ELSE TRUE END)
  AND (CASE WHEN $7::bool THEN year = $8 ELSE TRUE END)
LIMIT $1
OFFSET $2
`

type ListMoviesParams struct {
	Limit    int32
	Offset   int32
	LkGenre  bool
	Genre    sql.NullString
	LkActors bool
	Actor    sql.NullString
	EqYear   bool
	Year     int32
}

func (q *Queries) ListMovies(ctx context.Context, arg ListMoviesParams) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, listMovies,
		arg.Limit,
		arg.Offset,
		arg.LkGenre,
		arg.Genre,
		arg.LkActors,
		arg.Actor,
		arg.EqYear,
		arg.Year,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Released,
			&i.Genre,
			&i.Actors,
			&i.Year,
			&i.Price,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
