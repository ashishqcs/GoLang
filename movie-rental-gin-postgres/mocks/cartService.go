// Code generated by MockGen. DO NOT EDIT.
// Source: service/cart.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "movieRentals/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockICartService is a mock of ICartService interface.
type MockICartService struct {
	ctrl     *gomock.Controller
	recorder *MockICartServiceMockRecorder
}

// MockICartServiceMockRecorder is the mock recorder for MockICartService.
type MockICartServiceMockRecorder struct {
	mock *MockICartService
}

// NewMockICartService creates a new mock instance.
func NewMockICartService(ctrl *gomock.Controller) *MockICartService {
	mock := &MockICartService{ctrl: ctrl}
	mock.recorder = &MockICartServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICartService) EXPECT() *MockICartServiceMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockICartService) AddToCart(ctx context.Context, movieIds []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", ctx, movieIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockICartServiceMockRecorder) AddToCart(ctx, movieIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockICartService)(nil).AddToCart), ctx, movieIds)
}

// GetCart mocks base method.
func (m *MockICartService) GetCart(ctx context.Context) *model.GetCartResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", ctx)
	ret0, _ := ret[0].(*model.GetCartResponse)
	return ret0
}

// GetCart indicates an expected call of GetCart.
func (mr *MockICartServiceMockRecorder) GetCart(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockICartService)(nil).GetCart), ctx)
}
