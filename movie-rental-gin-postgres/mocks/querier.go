// Code generated by MockGen. DO NOT EDIT.
// Source: movieRentals/db/sqlc (interfaces: Querier)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	db "movieRentals/db/sqlc"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockQuerier) CreateMovie(arg0 context.Context, arg1 db.CreateMovieParams) (db.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", arg0, arg1)
	ret0, _ := ret[0].(db.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockQuerierMockRecorder) CreateMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockQuerier)(nil).CreateMovie), arg0, arg1)
}
