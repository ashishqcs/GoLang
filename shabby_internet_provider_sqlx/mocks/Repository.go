// Code generated by mockery v2.30.16. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"
	postgres "internet.provider/postgres"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetBillsByName provides a mock function with given fields: name
func (_m *Repository) GetBillsByName(name string) ([]postgres.BillEntity, error) {
	ret := _m.Called(name)

	var r0 []postgres.BillEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]postgres.BillEntity, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []postgres.BillEntity); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgres.BillEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveBill provides a mock function with given fields: bill
func (_m *Repository) SaveBill(bill *postgres.BillEntity) error {
	ret := _m.Called(bill)

	var r0 error
	if rf, ok := ret.Get(0).(func(*postgres.BillEntity) error); ok {
		r0 = rf(bill)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveBills provides a mock function with given fields: bills
func (_m *Repository) SaveBills(bills []postgres.BillEntity) error {
	ret := _m.Called(bills)

	var r0 error
	if rf, ok := ret.Get(0).(func([]postgres.BillEntity) error); ok {
		r0 = rf(bills)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
